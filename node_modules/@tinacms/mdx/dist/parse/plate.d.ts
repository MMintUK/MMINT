/**

Copyright 2021 Forestry.io Holdings, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/
import { Position } from './remarkToPlate';
export declare type RootElement = {
    type: 'root';
    children: BlockElement[];
};
export declare type HeadingElement = {
    type: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';
    children: InlineElement[];
};
export declare type ParagraphElement = {
    type: 'p';
    children: InlineElement[];
};
export declare type MdxBlockElement = {
    type: 'mdxJsxFlowElement';
    name: string | null;
    props: Record<string, unknown>;
    children: [EmptyTextElement];
};
export declare type HrElement = {
    type: 'hr';
    children: [EmptyTextElement];
};
export declare type HTMLElement = {
    type: 'html';
    value: string;
    children: [EmptyTextElement];
};
export declare type HTMLInlineElement = {
    type: 'html_inline';
    value: string;
    children: [EmptyTextElement];
};
export declare type InvalidMarkdownElement = {
    type: 'invalid_markdown';
    value: string;
    message: string;
    position?: Position;
    children: [EmptyTextElement];
};
export declare type CodeBlockElement = {
    type: 'code_block';
    lang?: string;
    value: string;
    children: [EmptyTextElement];
};
export declare type BlockquoteElement = {
    type: 'blockquote';
    children: InlineElement[];
};
export declare type ListItemContentElement = {
    type: 'lic';
    children: LicElement[];
};
export declare type ListItemChildrenElement = ListItemContentElement | UnorderedListElement | OrderedListElement;
export declare type ListItemElement = {
    type: 'li';
    children: ListItemChildrenElement[];
};
export declare type UnorderedListElement = {
    type: 'ul';
    children: ListItemElement[];
};
export declare type OrderedListElement = {
    type: 'ol';
    children: ListItemElement[];
};
export declare type List = OrderedListElement | UnorderedListElement;
export declare type BlockElement = HeadingElement | ParagraphElement | CodeBlockElement | BlockquoteElement | MdxBlockElement | HTMLElement | ImageElement | UnorderedListElement | OrderedListElement | ListItemElement | HrElement | InvalidMarkdownElement;
export declare type MdxInlineElement = {
    type: 'mdxJsxTextElement';
    name: string | null;
    props: Record<string, unknown>;
    children: [EmptyTextElement];
};
export declare type EmptyTextElement = {
    type: 'text';
    text: '';
};
export declare type TextElement = {
    type: 'text';
    text: string;
    bold?: boolean;
    italic?: boolean;
    code?: boolean;
};
export declare type ImageElement = {
    type: 'img';
    url: string;
    alt?: string;
    caption?: string | null;
    children: [EmptyTextElement];
};
export declare type LinkElement = {
    type: 'a';
    url: string;
    title?: string | null;
    children: InlineElement[];
};
export declare type BreakElement = {
    type: 'break';
    children: [EmptyTextElement];
};
export declare type LicElement = InlineElement;
export declare type InlineElement = TextElement | MdxInlineElement | BreakElement | LinkElement | ImageElement | HTMLInlineElement;
